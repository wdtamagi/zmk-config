#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <behaviors.dtsi>
#include <behaviors/studio_unlock.dtsi>
#include <behaviors/mouse_keys.dtsi>
#include <behaviors/mouse_key_press.dtsi>
#include <behaviors/mouse_key_toggle.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/input_transform.h>
#include <input/processors/xyz.dtsi>

#define BAS 0
#define NUM 1
#define MSC 2

#ifndef MOVE_Y
#define MOVE_Y(n) (0)
#endif
#ifndef MOVE_X
#define MOVE_X(n) (0)
#endif

#define U_MOUSE_MOVE_MAX 1700
#define MOU_U MOVE_Y(-U_MOUSE_MOVE_MAX)
#define MOU_D MOVE_Y(U_MOUSE_MOVE_MAX)
#define MOU_L MOVE_X(-U_MOUSE_MOVE_MAX)
#define MOU_R MOVE_X(U_MOUSE_MOVE_MAX)

#define U_MOUSE_SCROLL_MAX 10
#define SCL_U MOVE_Y(U_MOUSE_SCROLL_MAX)
#define SCL_D MOVE_Y(-U_MOUSE_SCROLL_MAX)
#define SCL_L MOVE_X(-U_MOUSE_SCROLL_MAX)
#define SCL_R MOVE_X(U_MOUSE_SCROLL_MAX)

/ {
    xy_transf: xy_transf {
        compatible = "zmk,input-processor-transform";
        #input-processor-cells = <1>;
        type = <INPUT_EV_REL>;
        x-codes = <INPUT_REL_X>, <INPUT_REL_WHEEL>;
        y-codes = <INPUT_REL_Y>, <INPUT_REL_HWHEEL>;
    };
    xy_scaler: xy_scaler {
        compatible = "zmk,input-processor-scaler";
        #input-processor-cells = <2>;
        type = <INPUT_EV_REL>;
        codes = <INPUT_REL_X>, <INPUT_REL_Y>;
        track-remainders;
    };
    x_scaler: x_scaler {
        compatible = "zmk,input-processor-scaler";
        #input-processor-cells = <2>;
        type = <INPUT_EV_REL>;
        codes = <INPUT_REL_X>;
    };
    to_wheel: to_wheel {
        compatible = "zmk,input-processor-code-mapper";
        #input-processor-cells = <0>;
        type = <INPUT_EV_REL>;
        map = <INPUT_REL_X INPUT_REL_HWHEEL>
            , <INPUT_REL_Y INPUT_REL_WHEEL>;
    };
    tracball_mmv_il {
        compatible = "zmk,input-listener";
        device = <&tball_split>;
        input-processors = <&zip_zxy>, <&xy_scaler 4 1>;
        precise {
            layers = <NUM>;
            process-next;
            input-processors = <&xy_scaler 1 3>;
        };
        scroll {
            layers = <MSC>;
            process-next;
            input-processors = <&xy_transf (INPUT_TRANSFORM_X_INVERT)>
                             , <&xy_scaler 1 55>
                             , <&to_wheel>;
        };
    };

    behaviors {
                ht: hold_tap_mods {
                        compatible = "zmk,behavior-hold-tap"; #binding-cells = <2>;
                        tapping-term-ms = <200>;
                        flavor = "hold-preferred"; bindings = <&kp>, <&kp>;
                        display-name = "mod-tap";
                };
                hm: homerow_mods {
                        compatible = "zmk,behavior-hold-tap"; #binding-cells = <2>;
                        tapping-term-ms = <200>; quick-tap-ms = <200>;
                        flavor = "tap-preferred"; bindings = <&kp>, <&kp>;
                        display-name = "mod-tap";
                };
                hl: homerow_layers {
                        compatible = "zmk,behavior-hold-tap"; #binding-cells = <2>;
                        tapping-term-ms = <200>; quick-tap-ms = <200>;
                        flavor = "tap-preferred"; bindings = <&mo>, <&kp>;
                        display-name = "hold-layer";
                };
                kg: key_press_tap_toggle {
                        compatible = "zmk,behavior-hold-tap"; #binding-cells = <2>;
                        tapping-term-ms = <200>; quick-tap-ms = <200>;
                        flavor = "tap-preferred"; bindings = <&kp>, <&tog>;
                };
                mkg: hold_mouse_key_press_tap_toggle {
                        compatible = "zmk,behavior-hold-tap"; #binding-cells = <2>;
                        tapping-term-ms = <200>; quick-tap-ms = <200>;
                        flavor = "tap-preferred"; bindings = <&mkp>, <&tog>;
                };
                m_v: mouse_move {
                        compatible = "zmk,behavior-input-two-axis";
                        #binding-cells = <1>;
                        trigger-period-ms = <12>; // slow down for OTA, default is 3ms
                        x-input-code = <INPUT_REL_X>;
                        y-input-code = <INPUT_REL_Y>;
                        time-to-max-speed-ms = <300>;
                        acceleration-exponent = <1>;
                };
                m_s: mouse_scroll {
                        compatible = "zmk,behavior-input-two-axis";
                        #binding-cells = <1>;
                        trigger-period-ms = <12>; // slow down for OTA, default is 3ms
                        x-input-code = <INPUT_REL_HWHEEL>;
                        y-input-code = <INPUT_REL_WHEEL>;
                        time-to-max-speed-ms = <50>;
                        acceleration-exponent = <1>;
                };
    };

        mmv_input_listener {
                compatible = "zmk,input-listener";
                device = <&m_v>;
        };
        mms_input_listener {
                compatible = "zmk,input-listener";
                device = <&m_s>;
        };

        combos {
                compatible = "zmk,combos";

                spc       { timeout-ms = <50>; key-positions = <16 17>; bindings = <&kp SPC>; layers = <BAS NUM>; };
                bksp      { timeout-ms = <50>; key-positions = <17 18>; bindings = <&kp BKSP>; layers = <BAS NUM>; };
                del       { timeout-ms = <50>; key-positions = <6 7 8>; bindings = <&kp DEL>; layers = <BAS NUM>; };

                esc       { timeout-ms = <50>; key-positions = <11 12>; bindings = <&kp ESC>; layers = <BAS NUM>; };
                tab       { timeout-ms = <50>; key-positions = <12 13>; bindings = <&kp TAB>; layers = <BAS NUM>; };

                ret_r     { timeout-ms = <50>; key-positions = <26 17 18>; bindings = <&kp RET>; layers = <BAS NUM>; };
                ret_l     { timeout-ms = <50>; key-positions = <11 12 23>; bindings = <&kp RET>; layers = <BAS NUM>; };

                /* tog_lnp   { timeout-ms = <50>; key-positions = <1 2>; bindings = <&tog LNP>; layers = <BAS NUM MSC>; }; */
                /* tog_rnp   { timeout-ms = <50>; key-positions = <7 8>; bindings = <&tog RNP>; layers = <BAS NUM MSC>; }; */
                /**/
                /* mkp_swap  { timeout-ms = <50>; key-positions = <36 38>; bindings = <&tog LHB>; layers = <BAS NUM MSC>; }; */
                /* mou_swap  { timeout-ms = <50>; key-positions = <46 47>; bindings = <&tog LHB>; layers = <BAS NUM MSC>; }; */

                /* tog_msk_ll { timeout-ms = <50>; key-positions = <21 22>; bindings = <&tog MSK>; layers = <BAS NUM MSC>; }; */
                /* tog_msk_lr { timeout-ms = <50>; key-positions = <27 28>; bindings = <&tog MSK>; layers = <BAS NUM MSC>; }; */

                dfu_l     { timeout-ms = <50>; key-positions = <0 1>; bindings = <&bootloader>; layers = <MSC>; };
        };

    macros {
        m_copy: m_copy {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LGUI>
                , <&macro_tap &kp C>
                , <&macro_release &kp LGUI>
                ;
        };
        m_paste: m_paste {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LGUI>
                , <&macro_tap &kp V>
                , <&macro_release &kp LGUI>
                ;
        };
        m_mcontrol: m_mcontrol {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LCTRL>
                , <&macro_tap &kp UP>
                , <&macro_release &kp LCTRL>
                ;
        };
        m_printscr: m_printscr {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LGUI>
                , <&macro_press &kp LSHIFT>
                , <&macro_tap &kp N5>
                , <&macro_release &kp LGUI>
                , <&macro_release &kp LSHIFT>
                ;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        BAS_layer {
            display-name = "Base";
            bindings = <
    &trans                  &kp LCTRL               &kp DEL              &kp BSPC                 &kp RET                &kp TAB                &mkp LCLK                   &trans           
&mo NUM   &sk LSHIFT  &kp COMMA       &kp APOS  &kp DOT     &kp I  &kp SPACE     &kp R          &kp A     &kp SPACE    &kp L       &kp J      &kp Y      &kp SEMI    &sk RSHIFT       &mo NUM
	&mo MSC                   &kp U                   &kp O                &kp E                    &kp T                  &kp N                  &kp S                       &mo MSC      

                            &kp N1                  &kp N1                                                             &kp F12                &kp UP                          
	                   &kp N4    &kp N2        &kp N4    &kp N2                                           &m_mcontrol      &trans   &kp LEFT      &kp RIGHT  
	                        &kp N3                  &kp N3                                                              &kp RGUI               &kp DOWN                    

                                                                         &kp V                    &kp P                                     
	                                                                 &kp M   &kp K            &kp F   &kp H   
	                                                                     &kp C                    &kp D                        

                                                                         &kp ESC                  &kp X                                     
	                                                                 &kp G     &kp W          &kp B   &key_repeat   
	                                                                     &kp Z                    &kp Q                        
            >;
        };

        NUM_layer {
            display-name = "Num";
            bindings = <
    &trans                   &kp AT                    &kp PLUS                  &kp DLLR                      &kp N1              &kp N5               &kp N9                     &mkp RCLK           
&trans   &caps_word  &kp EQUAL      &kp GRAVE  &kp CARET       &kp TILDE  &kp AMPS      &kp STAR          &kp N4     &kp N2   &kp N8    &kp N6   &kp EQUAL     &kp N0     &caps_word       &trans
	&mo MSC                   &kp EXCL                  &kp PRCNT                 &kp HASH                      &kp N3              &kp N7               &kp QMARK                  &mo MSC      

                            &trans                    &trans                                                                      &trans               &kp UP                          
	                   &trans    &trans          &trans    &trans                                                            &trans    &trans   &kp LEFT      &kp RIGHT  
	                        &trans                    &trans                                                                      &trans               &kp DOWN                    

                                                                                &kp LT                        &kp PIPE                                     
	                                                                     &kp LBRC    &kp RBRC          &kp FSLH      &kp NUBS   
	                                                                            &kp GT                        &trans                        

                                                                                &kp ESC                       &kp LBKT                                     
	                                                                    &kp UNDER     &kp MINUS        &kp LPAR      &kp RPAR   
	                                                                            &trans                        &kp RBKT                        
            >;
        };

        MSC_layer {
            label = "Msc";
            bindings = <
&trans       &kp EQUAL  &kp CARET  &kp AMPS      &kp N4    &kp N8     &kp EQUAL  &kp RSHIFT
&trans       &kp AT     &kp PLUS   &kp DLLR      &kp N1    &kp N5     &kp N9     &trans
&trans       &kp EXCL   &kp PRCNT  &kp HASH      &kp N3    &kp N7     &kp QMARK  &trans
&kp RSHIFT  &kp GRAVE  &kp TILDE  &kp STAR      &kp N2    &kp N6     &kp N0     &trans
&trans      &trans     &kp LBRC   &kp UNDER     &kp FSLH  &kp LPAR   &trans     &kp LEFT
&trans      &trans     &kp LT     &kp PLUS      &kp PIPE  &kp LBKT   &trans     &kp UP
&trans      &trans     &kp GT     &trans        &trans    &kp RBKT   &trans     &kp DOWN
&trans      &trans     &kp RBRC   &kp MINUS     &kp NUBS  &kp RPAR   &trans     &kp RIGHT
            >;
        };
    };
};
